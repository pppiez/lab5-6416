
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d60  08002d60  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000040  08002da8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002da8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000885e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cb  00000000  00000000  000288ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00029ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015639  00000000  00000000  0002ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008646  00000000  00000000  000401d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000858cb  00000000  00000000  00048817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  000ce134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002c78 	.word	0x08002c78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08002c78 	.word	0x08002c78

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b0ac      	sub	sp, #176	; 0xb0
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fabf 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f8a7 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f939 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f90d 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t line[] = "__________________________\r\n";
 80004f2:	4b46      	ldr	r3, [pc, #280]	; (800060c <main+0x130>)
 80004f4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80004f8:	461d      	mov	r5, r3
 80004fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000502:	c407      	stmia	r4!, {r0, r1, r2}
 8000504:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, line, sizeof(line), sizeof(line)-1);
 8000506:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800050a:	231c      	movs	r3, #28
 800050c:	221d      	movs	r2, #29
 800050e:	4840      	ldr	r0, [pc, #256]	; (8000610 <main+0x134>)
 8000510:	f001 fb5b 	bl	8001bca <HAL_UART_Transmit>

  uint8_t inblock[] = "                          \r\n";
 8000514:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <main+0x138>)
 8000516:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000524:	c407      	stmia	r4!, {r0, r1, r2}
 8000526:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, inblock, sizeof(inblock), sizeof(inblock)-1);
 8000528:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800052c:	231c      	movs	r3, #28
 800052e:	221d      	movs	r2, #29
 8000530:	4837      	ldr	r0, [pc, #220]	; (8000610 <main+0x134>)
 8000532:	f001 fb4a 	bl	8001bca <HAL_UART_Transmit>

  uint8_t welcome[] = "   Welcome to main menu!  \r\n";
 8000536:	4b38      	ldr	r3, [pc, #224]	; (8000618 <main+0x13c>)
 8000538:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000546:	c407      	stmia	r4!, {r0, r1, r2}
 8000548:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, welcome, sizeof(welcome), sizeof(welcome)-1);
 800054a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800054e:	231c      	movs	r3, #28
 8000550:	221d      	movs	r2, #29
 8000552:	482f      	ldr	r0, [pc, #188]	; (8000610 <main+0x134>)
 8000554:	f001 fb39 	bl	8001bca <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart2, line, sizeof(line), sizeof(line)-1);
 8000558:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800055c:	231c      	movs	r3, #28
 800055e:	221d      	movs	r2, #29
 8000560:	482b      	ldr	r0, [pc, #172]	; (8000610 <main+0x134>)
 8000562:	f001 fb32 	bl	8001bca <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, inblock, sizeof(inblock), sizeof(inblock)-1);
 8000566:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800056a:	231c      	movs	r3, #28
 800056c:	221d      	movs	r2, #29
 800056e:	4828      	ldr	r0, [pc, #160]	; (8000610 <main+0x134>)
 8000570:	f001 fb2b 	bl	8001bca <HAL_UART_Transmit>

  uint8_t select[] = "  Please select mode      \r\n";
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <main+0x140>)
 8000576:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000584:	c407      	stmia	r4!, {r0, r1, r2}
 8000586:	7023      	strb	r3, [r4, #0]
  uint8_t menu0[] = " -> 0 : LED Control\r\n";
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0x144>)
 800058a:	f107 0418 	add.w	r4, r7, #24
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000598:	6020      	str	r0, [r4, #0]
 800059a:	3404      	adds	r4, #4
 800059c:	8021      	strh	r1, [r4, #0]
  uint8_t menu1[] = " -> 1 : Button Status\r\n";
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <main+0x148>)
 80005a0:	463c      	mov	r4, r7
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ac:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, select, sizeof(select), sizeof(select)-1);
 80005b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80005b4:	231c      	movs	r3, #28
 80005b6:	221d      	movs	r2, #29
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <main+0x134>)
 80005ba:	f001 fb06 	bl	8001bca <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, menu0, sizeof(menu0), sizeof(menu0)-1);
 80005be:	f107 0118 	add.w	r1, r7, #24
 80005c2:	2315      	movs	r3, #21
 80005c4:	2216      	movs	r2, #22
 80005c6:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0x134>)
 80005c8:	f001 faff 	bl	8001bca <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, menu1, sizeof(menu1), sizeof(menu1)-1);
 80005cc:	4639      	mov	r1, r7
 80005ce:	2317      	movs	r3, #23
 80005d0:	2218      	movs	r2, #24
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <main+0x134>)
 80005d4:	f001 faf9 	bl	8001bca <HAL_UART_Transmit>


  UARTInterruptConfig();
 80005d8:	f000 f930 	bl	800083c <UARTInterruptConfig>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  DummyTask();
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005dc:	2101      	movs	r1, #1
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0x14c>)
 80005e0:	f000 fdf3 	bl	80011ca <HAL_GPIO_TogglePin>
	if(Flag == 49){
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <main+0x150>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b31      	cmp	r3, #49	; 0x31
 80005ea:	d1f7      	bne.n	80005dc <main+0x100>
//	  sprintf((char*)TxBuffer, "Your flag: %s\r\n", RxBuffer);
//	  HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
	  HAL_UART_Transmit(&huart2, flag1, sizeof(flag1), sizeof(flag1)-1);
 80005ec:	2310      	movs	r3, #16
 80005ee:	2211      	movs	r2, #17
 80005f0:	490f      	ldr	r1, [pc, #60]	; (8000630 <main+0x154>)
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x134>)
 80005f4:	f001 fae9 	bl	8001bca <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, mode1, sizeof(mode1), sizeof(mode1)-1);
 80005f8:	231f      	movs	r3, #31
 80005fa:	2220      	movs	r2, #32
 80005fc:	490d      	ldr	r1, [pc, #52]	; (8000634 <main+0x158>)
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <main+0x134>)
 8000600:	f001 fae3 	bl	8001bca <HAL_UART_Transmit>
	  Flag = 0;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x150>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800060a:	e7e7      	b.n	80005dc <main+0x100>
 800060c:	08002c90 	.word	0x08002c90
 8000610:	2000005c 	.word	0x2000005c
 8000614:	08002cb0 	.word	0x08002cb0
 8000618:	08002cd0 	.word	0x08002cd0
 800061c:	08002cf0 	.word	0x08002cf0
 8000620:	08002d10 	.word	0x08002d10
 8000624:	08002d28 	.word	0x08002d28
 8000628:	40020000 	.word	0x40020000
 800062c:	200000a1 	.word	0x200000a1
 8000630:	20000000 	.word	0x20000000
 8000634:	20000014 	.word	0x20000014

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fb0e 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fd9e 	bl	8001200 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ca:	f000 f8dd 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f800 	bl	80016f0 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f8c7 	bl	8000888 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 f9f4 	bl	8001b30 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f89b 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000005c 	.word	0x2000005c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ec:	f000 fcd4 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000808:	f000 fb42 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f000 fb34 	bl	8000e90 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <UARTInterruptConfig>:
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}

void UARTInterruptConfig()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	// start UART in interrupt mode
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4903      	ldr	r1, [pc, #12]	; (8000850 <UARTInterruptConfig+0x14>)
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <UARTInterruptConfig+0x18>)
 8000846:	f001 fa52 	bl	8001cee <HAL_UART_Receive_IT>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000a0 	.word	0x200000a0
 8000854:	2000005c 	.word	0x2000005c

08000858 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_UART_RxCpltCallback+0x24>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d103      	bne.n	8000870 <HAL_UART_RxCpltCallback+0x18>

		// return received char
//		sprintf((char*)TxBuffer, "Your input: %s\r\n", RxBuffer);
//		HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));

		Flag = *RxBuffer;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_UART_RxCpltCallback+0x28>)
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_UART_RxCpltCallback+0x2c>)
 800086e:	701a      	strb	r2, [r3, #0]

		// recall Receive
//		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);

	}
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	2000005c 	.word	0x2000005c
 8000880:	200000a0 	.word	0x200000a0
 8000884:	200000a1 	.word	0x200000a1

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fa08 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_UART_MspInit+0x94>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d133      	bne.n	800096e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_UART_MspInit+0x98>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <HAL_UART_MspInit+0x98>)
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_UART_MspInit+0x98>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_UART_MspInit+0x98>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0x98>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0x9c>)
 800095a:	f000 fa99 	bl	8000e90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2026      	movs	r0, #38	; 0x26
 8000964:	f000 f9cb 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000968:	2026      	movs	r0, #38	; 0x26
 800096a:	f000 f9e4 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40004400 	.word	0x40004400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f89a 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USART2_IRQHandler+0x10>)
 80009de:	f001 f9b7 	bl	8001d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000005c 	.word	0x2000005c

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f002 f8ef 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fd4b 	bl	80004dc <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000a54:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 8000a58:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000a5c:	200000a8 	.word	0x200000a8

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f92b 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fefc 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f943 	bl	8000d52 <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f90b 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000034 	.word	0x20000034
 8000b00:	2000003c 	.word	0x2000003c
 8000b04:	20000038 	.word	0x20000038

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000003c 	.word	0x2000003c
 8000b2c:	200000a4 	.word	0x200000a4

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000a4 	.word	0x200000a4

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff29 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff3e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff31 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff feda 	bl	8000b30 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d008      	beq.n	8000d9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e052      	b.n	8000e42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0216 	bic.w	r2, r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <HAL_DMA_Abort+0x62>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0208 	bic.w	r2, r2, #8
 8000dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dec:	e013      	b.n	8000e16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dee:	f7ff fe9f 	bl	8000b30 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d90c      	bls.n	8000e16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2220      	movs	r2, #32
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e015      	b.n	8000e42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1e4      	bne.n	8000dee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e28:	223f      	movs	r2, #63	; 0x3f
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d004      	beq.n	8000e68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e00c      	b.n	8000e82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e159      	b.n	8001160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8148 	bne.w	800115a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d017      	beq.n	8000f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a2 	beq.w	800115a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a56      	ldr	r2, [pc, #344]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x2ec>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x202>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <HAL_GPIO_Init+0x2f4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x1fe>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a47      	ldr	r2, [pc, #284]	; (8001188 <HAL_GPIO_Init+0x2f8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x1fa>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x1f6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	; (8001190 <HAL_GPIO_Init+0x300>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x1f2>
 800107e:	2304      	movs	r3, #4
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001082:	2307      	movs	r3, #7
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2ec>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f aea2 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	400b      	ands	r3, r1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e267      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e242      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc3a 	bl	8000b30 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc36 	bl	8000b30 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e207      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc26 	bl	8000b30 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc22 	bl	8000b30 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1f3      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fbdb 	bl	8000b30 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fbd7 	bl	8000b30 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a8      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbba 	bl	8000b30 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fbb6 	bl	8000b30 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e187      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb9a 	bl	8000b30 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fb96 	bl	8000b30 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e167      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb83 	bl	8000b30 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fb7f 	bl	8000b30 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e150      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb3f 	bl	8000b30 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fb3b 	bl	8000b30 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e10c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb00 	bl	8000b30 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fafc 	bl	8000b30 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff faea 	bl	8000b30 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fae6 	bl	8000b30 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b5      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a1 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d141      	bne.n	8001636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff faba 	bl	8000b30 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fab6 	bl	8000b30 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e087      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fa8f 	bl	8000b30 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fa8b 	bl	8000b30 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e05c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x416>
 8001634:	e054      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fa78 	bl	8000b30 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fa74 	bl	8000b30 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e038      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x4ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d028      	beq.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d121      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff f9a6 	bl	8000b30 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff f9a2 	bl	8000b30 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f906 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08002d40 	.word	0x08002d40
 80018b4:	20000034 	.word	0x20000034
 80018b8:	20000038 	.word	0x20000038

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b094      	sub	sp, #80	; 0x50
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018cc:	2300      	movs	r3, #0
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	4b79      	ldr	r3, [pc, #484]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00d      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f200 80e1 	bhi.w	8001aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ee:	e0db      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018f4:	e0db      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018fa:	e0d8      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d063      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
 800191c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
 800192a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800192e:	4622      	mov	r2, r4
 8001930:	462b      	mov	r3, r5
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0159      	lsls	r1, r3, #5
 800193c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001940:	0150      	lsls	r0, r2, #5
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4621      	mov	r1, r4
 8001948:	1a51      	subs	r1, r2, r1
 800194a:	6139      	str	r1, [r7, #16]
 800194c:	4629      	mov	r1, r5
 800194e:	eb63 0301 	sbc.w	r3, r3, r1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001960:	4659      	mov	r1, fp
 8001962:	018b      	lsls	r3, r1, #6
 8001964:	4651      	mov	r1, sl
 8001966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196a:	4651      	mov	r1, sl
 800196c:	018a      	lsls	r2, r1, #6
 800196e:	4651      	mov	r1, sl
 8001970:	ebb2 0801 	subs.w	r8, r2, r1
 8001974:	4659      	mov	r1, fp
 8001976:	eb63 0901 	sbc.w	r9, r3, r1
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800198a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198e:	4690      	mov	r8, r2
 8001990:	4699      	mov	r9, r3
 8001992:	4623      	mov	r3, r4
 8001994:	eb18 0303 	adds.w	r3, r8, r3
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	462b      	mov	r3, r5
 800199c:	eb49 0303 	adc.w	r3, r9, r3
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ae:	4629      	mov	r1, r5
 80019b0:	024b      	lsls	r3, r1, #9
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019b8:	4621      	mov	r1, r4
 80019ba:	024a      	lsls	r2, r1, #9
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c2:	2200      	movs	r2, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019cc:	f7fe fc04 	bl	80001d8 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019d8:	e058      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	4611      	mov	r1, r2
 80019e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f4:	4642      	mov	r2, r8
 80019f6:	464b      	mov	r3, r9
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	0159      	lsls	r1, r3, #5
 8001a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a06:	0150      	lsls	r0, r2, #5
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a12:	4649      	mov	r1, r9
 8001a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a30:	eb63 050b 	sbc.w	r5, r3, fp
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	00eb      	lsls	r3, r5, #3
 8001a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a42:	00e2      	lsls	r2, r4, #3
 8001a44:	4614      	mov	r4, r2
 8001a46:	461d      	mov	r5, r3
 8001a48:	4643      	mov	r3, r8
 8001a4a:	18e3      	adds	r3, r4, r3
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	464b      	mov	r3, r9
 8001a50:	eb45 0303 	adc.w	r3, r5, r3
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a62:	4629      	mov	r1, r5
 8001a64:	028b      	lsls	r3, r1, #10
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	028a      	lsls	r2, r1, #10
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	2200      	movs	r2, #0
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	61fa      	str	r2, [r7, #28]
 8001a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a80:	f7fe fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4613      	mov	r3, r2
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3750      	adds	r7, #80	; 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000034 	.word	0x20000034

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08002d50 	.word	0x08002d50

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08002d50 	.word	0x08002d50

08001b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e03f      	b.n	8001bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fec4 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fddf 	bl	8002738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b08a      	sub	sp, #40	; 0x28
 8001bce:	af02      	add	r7, sp, #8
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d17c      	bne.n	8001ce4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_UART_Transmit+0x2c>
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e075      	b.n	8001ce6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_UART_Transmit+0x3e>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e06e      	b.n	8001ce6 <HAL_UART_Transmit+0x11c>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2221      	movs	r2, #33	; 0x21
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c1e:	f7fe ff87 	bl	8000b30 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c38:	d108      	bne.n	8001c4c <HAL_UART_Transmit+0x82>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e003      	b.n	8001c54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c5c:	e02a      	b.n	8001cb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fb1f 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e036      	b.n	8001ce6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	3302      	adds	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e007      	b.n	8001ca6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1cf      	bne.n	8001c5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2140      	movs	r1, #64	; 0x40
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 faef 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e006      	b.n	8001ce6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d11d      	bne.n	8001d44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_UART_Receive_IT+0x26>
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e016      	b.n	8001d46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_UART_Receive_IT+0x38>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e00f      	b.n	8001d46 <HAL_UART_Receive_IT+0x58>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fb24 	bl	8002388 <UART_Start_Receive_IT>
 8001d40:	4603      	mov	r3, r0
 8001d42:	e000      	b.n	8001d46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ba      	sub	sp, #232	; 0xe8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_UART_IRQHandler+0x66>
 8001da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fc07 	bl	80025c2 <UART_Receive_IT>
      return;
 8001db4:	e256      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80de 	beq.w	8001f7c <HAL_UART_IRQHandler+0x22c>
 8001dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80d1 	beq.w	8001f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_UART_IRQHandler+0xae>
 8001de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_UART_IRQHandler+0xd2>
 8001e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
 8001e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
 8001e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f043 0208 	orr.w	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 81ed 	beq.w	800225a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_UART_IRQHandler+0x14e>
 8001e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb92 	bl	80025c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_UART_IRQHandler+0x17a>
 8001ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d04f      	beq.n	8001f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa9a 	bl	8002404 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d141      	bne.n	8001f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eec:	e853 3f00 	ldrex	r3, [r3]
 8001ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f1a:	e841 2300 	strex	r3, r2, [r1]
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1d9      	bne.n	8001ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d013      	beq.n	8001f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	4a7d      	ldr	r2, [pc, #500]	; (800212c <HAL_UART_IRQHandler+0x3dc>)
 8001f38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ff83 	bl	8000e4a <HAL_DMA_Abort_IT>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f54:	4610      	mov	r0, r2
 8001f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f58:	e00e      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f990 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	e00a      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f98c 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	e006      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f988 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f76:	e170      	b.n	800225a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	bf00      	nop
    return;
 8001f7a:	e16e      	b.n	800225a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 814a 	bne.w	800221a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8143 	beq.w	800221a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 813c 	beq.w	800221a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	f040 80b4 	bne.w	8002130 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8140 	beq.w	800225e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	f080 8139 	bcs.w	800225e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ffe:	f000 8088 	beq.w	8002112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	330c      	adds	r3, #12
 8002008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002010:	e853 3f00 	ldrex	r3, [r3]
 8002014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	330c      	adds	r3, #12
 800202a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800202e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800203a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1d9      	bne.n	8002002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3314      	adds	r3, #20
 8002054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002058:	e853 3f00 	ldrex	r3, [r3]
 800205c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3314      	adds	r3, #20
 800206e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002072:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002076:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002078:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800207a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e1      	bne.n	800204e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3314      	adds	r3, #20
 8002090:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800209a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3314      	adds	r3, #20
 80020aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e3      	bne.n	800208a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	330c      	adds	r3, #12
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	e853 3f00 	ldrex	r3, [r3]
 80020de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e2:	f023 0310 	bic.w	r3, r3, #16
 80020e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	330c      	adds	r3, #12
 80020f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e3      	bne.n	80020d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fe2c 	bl	8000d6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800211a:	b29b      	uxth	r3, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	b29b      	uxth	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8b6 	bl	8002294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002128:	e099      	b.n	800225e <HAL_UART_IRQHandler+0x50e>
 800212a:	bf00      	nop
 800212c:	080024cb 	.word	0x080024cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002138:	b29b      	uxth	r3, r3
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 808b 	beq.w	8002262 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800214c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8086 	beq.w	8002262 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	330c      	adds	r3, #12
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	e853 3f00 	ldrex	r3, [r3]
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800216c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800217a:	647a      	str	r2, [r7, #68]	; 0x44
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002182:	e841 2300 	strex	r3, r2, [r1]
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1e3      	bne.n	8002156 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3314      	adds	r3, #20
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	e853 3f00 	ldrex	r3, [r3]
 800219c:	623b      	str	r3, [r7, #32]
   return(result);
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3314      	adds	r3, #20
 80021ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021b2:	633a      	str	r2, [r7, #48]	; 0x30
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e3      	bne.n	800218e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0310 	bic.w	r3, r3, #16
 80021ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	330c      	adds	r3, #12
 80021f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021f8:	61fa      	str	r2, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	e841 2300 	strex	r3, r2, [r1]
 8002204:	617b      	str	r3, [r7, #20]
   return(result);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e3      	bne.n	80021d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800220c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f83e 	bl	8002294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002218:	e023      	b.n	8002262 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_UART_IRQHandler+0x4ea>
 8002226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f95d 	bl	80024f2 <UART_Transmit_IT>
    return;
 8002238:	e014      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800223a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00e      	beq.n	8002264 <HAL_UART_IRQHandler+0x514>
 8002246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f99d 	bl	8002592 <UART_EndTransmit_IT>
    return;
 8002258:	e004      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
    return;
 800225a:	bf00      	nop
 800225c:	e002      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
      return;
 800225e:	bf00      	nop
 8002260:	e000      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
      return;
 8002262:	bf00      	nop
  }
}
 8002264:	37e8      	adds	r7, #232	; 0xe8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop

0800226c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b090      	sub	sp, #64	; 0x40
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022bc:	e050      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d04c      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <UART_WaitOnFlagUntilTimeout+0x30>
 80022cc:	f7fe fc30 	bl	8000b30 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022d8:	429a      	cmp	r2, r3
 80022da:	d241      	bcs.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	e853 3f00 	ldrex	r3, [r3]
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fc:	637a      	str	r2, [r7, #52]	; 0x34
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3314      	adds	r3, #20
 8002316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	613b      	str	r3, [r7, #16]
   return(result);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002330:	623a      	str	r2, [r7, #32]
 8002332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	6a3a      	ldr	r2, [r7, #32]
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	61bb      	str	r3, [r7, #24]
   return(result);
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e00f      	b.n	8002380 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d09f      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2222      	movs	r2, #34	; 0x22
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b095      	sub	sp, #84	; 0x54
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800242c:	643a      	str	r2, [r7, #64]	; 0x40
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002434:	e841 2300 	strex	r3, r2, [r1]
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3314      	adds	r3, #20
 800245e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	2b01      	cmp	r3, #1
 800247a:	d119      	bne.n	80024b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	60bb      	str	r3, [r7, #8]
   return(result);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800249c:	61ba      	str	r2, [r7, #24]
 800249e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	613b      	str	r3, [r7, #16]
   return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024be:	bf00      	nop
 80024c0:	3754      	adds	r7, #84	; 0x54
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fecb 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b21      	cmp	r3, #33	; 0x21
 8002504:	d13e      	bne.n	8002584 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	d114      	bne.n	800253a <UART_Transmit_IT+0x48>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800252c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	1c9a      	adds	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]
 8002538:	e008      	b.n	800254c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6211      	str	r1, [r2, #32]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29b      	uxth	r3, r3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4619      	mov	r1, r3
 800255a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10f      	bne.n	8002580 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fe5a 	bl	800226c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08c      	sub	sp, #48	; 0x30
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b22      	cmp	r3, #34	; 0x22
 80025d4:	f040 80ab 	bne.w	800272e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d117      	bne.n	8002612 <UART_Receive_IT+0x50>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d113      	bne.n	8002612 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002600:	b29a      	uxth	r2, r3
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	1c9a      	adds	r2, r3, #2
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
 8002610:	e026      	b.n	8002660 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002624:	d007      	beq.n	8002636 <UART_Receive_IT+0x74>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <UART_Receive_IT+0x82>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e008      	b.n	8002656 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002650:	b2da      	uxtb	r2, r3
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4619      	mov	r1, r3
 800266e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002670:	2b00      	cmp	r3, #0
 8002672:	d15a      	bne.n	800272a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0220 	bic.w	r2, r2, #32
 8002682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d135      	bne.n	8002720 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	613b      	str	r3, [r7, #16]
   return(result);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f023 0310 	bic.w	r3, r3, #16
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	623a      	str	r2, [r7, #32]
 80026dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	69f9      	ldr	r1, [r7, #28]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e5      	bne.n	80026ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d10a      	bne.n	8002712 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fdbb 	bl	8002294 <HAL_UARTEx_RxEventCallback>
 800271e:	e002      	b.n	8002726 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fe f899 	bl	8000858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e002      	b.n	8002730 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3730      	adds	r7, #48	; 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800273c:	b0c0      	sub	sp, #256	; 0x100
 800273e:	af00      	add	r7, sp, #0
 8002740:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	ea40 0301 	orr.w	r3, r0, r1
 8002760:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	431a      	orrs	r2, r3
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002790:	f021 010c 	bic.w	r1, r1, #12
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800279e:	430b      	orrs	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	6999      	ldr	r1, [r3, #24]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	ea40 0301 	orr.w	r3, r0, r1
 80027be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <UART_SetConfig+0x2cc>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d005      	beq.n	80027d8 <UART_SetConfig+0xa0>
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b8d      	ldr	r3, [pc, #564]	; (8002a08 <UART_SetConfig+0x2d0>)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d104      	bne.n	80027e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff f996 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 80027dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027e0:	e003      	b.n	80027ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e2:	f7ff f97d 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80027e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f4:	f040 810c 	bne.w	8002a10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002802:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002806:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	1891      	adds	r1, r2, r2
 8002810:	65b9      	str	r1, [r7, #88]	; 0x58
 8002812:	415b      	adcs	r3, r3
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002816:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800281a:	4621      	mov	r1, r4
 800281c:	eb12 0801 	adds.w	r8, r2, r1
 8002820:	4629      	mov	r1, r5
 8002822:	eb43 0901 	adc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb18 0303 	adds.w	r3, r8, r3
 8002844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002848:	462b      	mov	r3, r5
 800284a:	eb49 0303 	adc.w	r3, r9, r3
 800284e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800285e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002862:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002866:	460b      	mov	r3, r1
 8002868:	18db      	adds	r3, r3, r3
 800286a:	653b      	str	r3, [r7, #80]	; 0x50
 800286c:	4613      	mov	r3, r2
 800286e:	eb42 0303 	adc.w	r3, r2, r3
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
 8002874:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002878:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800287c:	f7fd fcac 	bl	80001d8 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <UART_SetConfig+0x2d4>)
 8002886:	fba3 2302 	umull	r2, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	011c      	lsls	r4, r3, #4
 800288e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002898:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800289c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	1891      	adds	r1, r2, r2
 80028a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80028a8:	415b      	adcs	r3, r3
 80028aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028b0:	4641      	mov	r1, r8
 80028b2:	eb12 0a01 	adds.w	sl, r2, r1
 80028b6:	4649      	mov	r1, r9
 80028b8:	eb43 0b01 	adc.w	fp, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d0:	4692      	mov	sl, r2
 80028d2:	469b      	mov	fp, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	eb1a 0303 	adds.w	r3, sl, r3
 80028da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028de:	464b      	mov	r3, r9
 80028e0:	eb4b 0303 	adc.w	r3, fp, r3
 80028e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028fc:	460b      	mov	r3, r1
 80028fe:	18db      	adds	r3, r3, r3
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
 8002902:	4613      	mov	r3, r2
 8002904:	eb42 0303 	adc.w	r3, r2, r3
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
 800290a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800290e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002912:	f7fd fc61 	bl	80001d8 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4611      	mov	r1, r2
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <UART_SetConfig+0x2d4>)
 800291e:	fba3 2301 	umull	r2, r3, r3, r1
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2264      	movs	r2, #100	; 0x64
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	1acb      	subs	r3, r1, r3
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <UART_SetConfig+0x2d4>)
 8002934:	fba3 2302 	umull	r2, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002940:	441c      	add	r4, r3
 8002942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800294c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002950:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	1891      	adds	r1, r2, r2
 800295a:	63b9      	str	r1, [r7, #56]	; 0x38
 800295c:	415b      	adcs	r3, r3
 800295e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002964:	4641      	mov	r1, r8
 8002966:	1851      	adds	r1, r2, r1
 8002968:	6339      	str	r1, [r7, #48]	; 0x30
 800296a:	4649      	mov	r1, r9
 800296c:	414b      	adcs	r3, r1
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800297c:	4659      	mov	r1, fp
 800297e:	00cb      	lsls	r3, r1, #3
 8002980:	4651      	mov	r1, sl
 8002982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002986:	4651      	mov	r1, sl
 8002988:	00ca      	lsls	r2, r1, #3
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	4603      	mov	r3, r0
 8002990:	4642      	mov	r2, r8
 8002992:	189b      	adds	r3, r3, r2
 8002994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002998:	464b      	mov	r3, r9
 800299a:	460a      	mov	r2, r1
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029b8:	460b      	mov	r3, r1
 80029ba:	18db      	adds	r3, r3, r3
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029be:	4613      	mov	r3, r2
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029ce:	f7fd fc03 	bl	80001d8 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <UART_SetConfig+0x2d4>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3332      	adds	r3, #50	; 0x32
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <UART_SetConfig+0x2d4>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	f003 0207 	and.w	r2, r3, #7
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4422      	add	r2, r4
 80029fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a00:	e105      	b.n	8002c0e <UART_SetConfig+0x4d6>
 8002a02:	bf00      	nop
 8002a04:	40011000 	.word	0x40011000
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a22:	4642      	mov	r2, r8
 8002a24:	464b      	mov	r3, r9
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	6239      	str	r1, [r7, #32]
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a32:	4641      	mov	r1, r8
 8002a34:	1854      	adds	r4, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb43 0501 	adc.w	r5, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	18e3      	adds	r3, r4, r3
 8002a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a58:	464b      	mov	r3, r9
 8002a5a:	eb45 0303 	adc.w	r3, r5, r3
 8002a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a7e:	4629      	mov	r1, r5
 8002a80:	008b      	lsls	r3, r1, #2
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a88:	4621      	mov	r1, r4
 8002a8a:	008a      	lsls	r2, r1, #2
 8002a8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a90:	f7fd fba2 	bl	80001d8 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <UART_SetConfig+0x4e4>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011c      	lsls	r4, r3, #4
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ab0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	61b9      	str	r1, [r7, #24]
 8002abc:	415b      	adcs	r3, r3
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	1851      	adds	r1, r2, r1
 8002ac8:	6139      	str	r1, [r7, #16]
 8002aca:	4649      	mov	r1, r9
 8002acc:	414b      	adcs	r3, r1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002adc:	4659      	mov	r1, fp
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	00ca      	lsls	r2, r1, #3
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	4642      	mov	r2, r8
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	008b      	lsls	r3, r1, #2
 8002b20:	4641      	mov	r1, r8
 8002b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b26:	4641      	mov	r1, r8
 8002b28:	008a      	lsls	r2, r1, #2
 8002b2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b2e:	f7fd fb53 	bl	80001d8 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <UART_SetConfig+0x4e4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	; 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <UART_SetConfig+0x4e4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b56:	441c      	add	r4, r3
 8002b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b60:	677a      	str	r2, [r7, #116]	; 0x74
 8002b62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b76:	4641      	mov	r1, r8
 8002b78:	1851      	adds	r1, r2, r1
 8002b7a:	6039      	str	r1, [r7, #0]
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	414b      	adcs	r3, r1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b8e:	4659      	mov	r1, fp
 8002b90:	00cb      	lsls	r3, r1, #3
 8002b92:	4651      	mov	r1, sl
 8002b94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b98:	4651      	mov	r1, sl
 8002b9a:	00ca      	lsls	r2, r1, #3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4642      	mov	r2, r8
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ba8:	464b      	mov	r3, r9
 8002baa:	460a      	mov	r2, r1
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60
 8002bbc:	667a      	str	r2, [r7, #100]	; 0x64
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bca:	4649      	mov	r1, r9
 8002bcc:	008b      	lsls	r3, r1, #2
 8002bce:	4641      	mov	r1, r8
 8002bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	008a      	lsls	r2, r1, #2
 8002bd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bdc:	f7fd fafc 	bl	80001d8 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <UART_SetConfig+0x4e4>)
 8002be6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2164      	movs	r1, #100	; 0x64
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	3332      	adds	r3, #50	; 0x32
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <UART_SetConfig+0x4e4>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4422      	add	r2, r4
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1a:	bf00      	nop
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	4d0d      	ldr	r5, [pc, #52]	; (8002c58 <__libc_init_array+0x38>)
 8002c24:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c26:	1b64      	subs	r4, r4, r5
 8002c28:	10a4      	asrs	r4, r4, #2
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	42a6      	cmp	r6, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	4d0b      	ldr	r5, [pc, #44]	; (8002c60 <__libc_init_array+0x40>)
 8002c32:	4c0c      	ldr	r4, [pc, #48]	; (8002c64 <__libc_init_array+0x44>)
 8002c34:	f000 f820 	bl	8002c78 <_init>
 8002c38:	1b64      	subs	r4, r4, r5
 8002c3a:	10a4      	asrs	r4, r4, #2
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	42a6      	cmp	r6, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c48:	4798      	blx	r3
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c52:	4798      	blx	r3
 8002c54:	3601      	adds	r6, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	08002d60 	.word	0x08002d60
 8002c5c:	08002d60 	.word	0x08002d60
 8002c60:	08002d60 	.word	0x08002d60
 8002c64:	08002d64 	.word	0x08002d64

08002c68 <memset>:
 8002c68:	4402      	add	r2, r0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <_init>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr

08002c84 <_fini>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr
